# Enterprise Data Pipeline Stack
# Complete infrastructure for distributed processing and streaming

version: '3.8'

services:
  # Data Pipeline Service
  data-pipeline:
    build:
      context: .
      target: production
    container_name: privacy-intent-pipeline
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_MASTER=spark://spark-master:7077
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ./checkpoints:/app/checkpoints
    depends_on:
      - kafka
      - spark-master
      - spark-worker
      - mlflow
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # Development Pipeline Service
  data-pipeline-dev:
    build:
      context: .
      target: development
    container_name: privacy-intent-pipeline-dev
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./output:/app/output
      - ./logs:/app/logs
    networks:
      - data-pipeline-network
    profiles:
      - development

  # Apache Kafka for streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - data-pipeline-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # Apache Spark Cluster
  spark-master:
    image: bitnami/spark:3.4.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - spark-master-data:/bitnami/spark
    networks:
      - data-pipeline-network
    restart: unless-stopped

  spark-worker:
    image: bitnami/spark:3.4.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - spark-worker-data:/bitnami/spark
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # MLflow for experiment tracking
  mlflow:
    image: python:3.9-slim
    container_name: mlflow
    command: >
      sh -c "pip install mlflow &&
             mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db"
    ports:
      - "5000:5000"
    volumes:
      - mlflow-data:/mlflow
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - data-pipeline-network
    restart: unless-stopped

  # PostgreSQL for metadata storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: privacy_intent
      POSTGRES_USER: pipeline
      POSTGRES_PASSWORD: pipeline123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - data-pipeline-network
    restart: unless-stopped

volumes:
  spark-master-data:
  spark-worker-data:
  mlflow-data:
  prometheus-data:
  grafana-data:
  redis-data:
  postgres-data:

networks:
  data-pipeline-network:
    driver: bridge 